from random import*def createboard(level):    for i in range(0, level):        board.append([])  # Adds a new list within the list 'board'        for j in range(0, level):            board[i].append(" ")  # Appends a new blank space item in the list'''The above function creates the board according to the level chosen, runs a nested for loop in the range of 0-levelthe length of the board needed for each level. Either a 7x7, 9x9, or 12x12 board. '''def word(waiting, choose):    while choose < waiting:  # Runs until the number of words chosen is equal to how many words are needed for the level        randomnum = randint(0, 99)        wordC = lines[randomnum]  # Sets variable wordC equal to word at location random has chosen in the list 'lines'        if wordC.strip() not in chosen:  # Checks if chosen word (stripped to eliminate the \n) has already been chosen            chosen.append(wordC.strip())  # Appends it to the list 'chosen'            choose = choose + 1'''The above function randomly chooses words, according to the number of words needed for the level chosen. It chooses  from a list of 100 words from a file, then checks if the word has been chosen and if it hasn't it adds it to the list of chosen words.'''def addwords(level):    for i in range(0, waiting):  # Runs in the range of 0 to the number of words needed for the level        direction = randint(1, 3)        tries = 0        while True:            empty = True            tries = tries + 1  # Tracks the number of times it has tried to add the word to the board            if direction == 1 or direction == 2:                xlocation = randint(0, level - len(chosen[i]))  # Random location in from 0 to end of list - len of word                ylocation = randint(0, level - 1)  # Chooses random list from 0 - the number of lists in the board                for j in range(len(chosen[i])):                    if board[ylocation][xlocation + j] != ' ':                        # Checks if original location and all spots to the right for the length of the word are blank                        empty = False  # If any spot isn't blank, empty is false and the for loop breaks                        break                if empty:  # If all checked spots are empty, goes into if statement depending on chosen direction                    if direction == 1:                        for j in range(len(chosen[i])):  # Runs for the length of letters in the word                            board[ylocation][xlocation + j] = chosen[i][j]                            # Sets each checked blank location to each individual letter of the word                    else:                        for j, k in zip(range(len(chosen[i]), 0, -1), range(len(chosen[i]))):                            # Range of length of word to 0, counting backwards                            board[ylocation][xlocation + k] = chosen[i][j-1]                            # Sets each checked blank location to the letters of the word, but end to start                    break                if tries < 100:  # If it has fit the word 100 times unsuccessfully, orientation switches to vertical                    direction = 3            else:                location1 = randint(0, level - len(chosen[i]))  # Random list from 0 to number of lists - len of word                location2 = randint(0, level - 1)  # Random location from 0 to end of list - 1                for j in range(len(chosen[i])):                    if board[location1 + j][location2] != ' ' and board[location1 + j][location2] != chosen[i][j]:                        # Checks if chosen spot and spots below are blank or the same letter                        empty = False  # If true empty is false                if empty:                    for j in range(len(chosen[i])):                        board[location1+j][location2] = chosen[i][j]                        # Sets each checked blank location to individual letters of the word                    break                if tries < 100:  # If it has fit the word 100 times unsuccessfully, orientation switches to horizontal                    direction = 1'''The above function adds all words to the board. It picks a direction (horizontal, horizontal flipped, or backwards and picks a random x and y value, then checks if all spots to the right of (for horizontal) or below it (for vertical)are empty. If they are empty, it adds the word letter by letter to the board. '''def addletters(level, letter):    for x in range(0, level):  # Nested for loop to check all spaces in each list of board in range (0 to board size)        for y in range(0, level):            v = randint(0, 25)            if board[x][y] == ' ':  # Checks if each space on the board is blank                board[x][y] = letter[v]  # Sets the blank spot to equal the randomly chosen location in 'letter''''The above function adds random letters from the alphabet to all blank spaces in the board after all words have been added. '''def wordguess(user):    if user in chosen and user not in foundwords:        # Checks if user's guess is in puzzle and if it has been guessed already        foundwords.append(user)  # Appends the word to the list of words that have been found and returns True        return True    else:        return False  # If it is not in the puzzle or has already been guessed, returns False'''The above function checks if the user's word guess is in the puzzle and if it has already been guessed. If it isin the puzzle and has not been guessed, the word is added to the list 'foundwords' and the function returns True, meaning the user's guess was right, otherwise it returns False.'''letter = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',          'v', 'w', 'x', 'y', 'z']lines = open("words.txt", "r").readlines()  # Sets variable to equal words.txt, and reads all lines of fileprint("Welcome to Becky's Word Search!")while True:  # While loop so that the user can play multiple consecutive games    level = 0    choose = 0    board = []    chosen = []    splitword = []    foundwords = []    wordsfound = 0    waiting = 0    while True:        option = input("Choose level: Easy (7x7 board, 5 words), Medium (9x9 board, 10 words), Hard (12x12 board,"                       " 15 words).\n").lower().strip()  # Makes input all lowercase and strips it        if option == 'easy' or option == 'medium' or option == 'hard':  # Breaks loop if user inputs a valid word            break    if option.lower() == "easy":  # Sets level (size of board) and waiting (number of words) according to level selected        level = 7        waiting = 5    elif option.lower() == "medium":        level = 9        waiting = 10    elif option.lower() == "hard":        level = 12        waiting = 15    createboard(level)  # Calling upon all functions to create board, select words, add words, and add letters    word(waiting, choose)    addwords(level)    addletters(level, letter)    while wordsfound < waiting:  # While loop runs until user has guessed all words in puzzle        for row in range(0, level):            for col in range(0, level):                line = board[row][col]  # Selects spot in list according to for loops for column and row                print(line, end=" ")  # Prints each item in each list without any quotations or brackets            print('')  # Prints a new line to put each list on a new line        user = input("Input a found word. Words can be horizontal (forwards and backwards) or vertical upright.\n")        if wordguess(user):            wordsfound = wordsfound + 1  # If the user guesses correctly, 1 is added to the number of words found            print("Nice! You found", user+".", "You have found", wordsfound, "of", waiting, "words.")        else:  # If the user guesses incorrectly (wrong word or already guessed word)            print("Incorrect.")    print("Congrats! You win!")    while True:        play = input("Would you like to play again? (yes or no)\n").lower()  # Gives user the option to play again        if play == 'yes' or play == 'no':  # Breaks loop if they input correct word            break    if play == 'no':  # If user does not want to play again, breaks larger while loop to stop the game        breakprint("Thanks for playing Becky's Word Search.")